{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Musync\\\\frontend\\\\src\\\\components\\\\Recorder\\\\Recorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useRef } from 'react'; // Import useRef for interval cleanup\nimport { AudioContext } from '../../context/AudioContext';\nimport Button from '../Button/Button';\nimport { RecorderContainer, Visualizer, ResultContainer } from './Recorder.styles';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Recorder = () => {\n  _s();\n  const {\n    recording,\n    audioBlob,\n    result,\n    loading,\n    error,\n    startRecording,\n    stopRecording,\n    recognizeSong,\n    reset\n  } = useContext(AudioContext);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [visualizerData, setVisualizerData] = useState([]);\n  const visualizerIntervalRef = useRef(null); // Use useRef to hold the interval ID\n\n  // Effect to clean up mediaRecorder when component unmounts or mediaRecorder changes\n  useEffect(() => {\n    return () => {\n      if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n        mediaRecorder.stop();\n        console.log('MediaRecorder stopped during cleanup.');\n      }\n      // Also clear the visualizer interval on component unmount\n      if (visualizerIntervalRef.current) {\n        clearInterval(visualizerIntervalRef.current);\n      }\n    };\n  }, [mediaRecorder]); // Dependency on mediaRecorder to ensure cleanup if it changes\n\n  const handleStartRecording = async () => {\n    // Reset any previous state before starting new recording\n    reset();\n    setVisualizerData([]);\n    const recorder = await startRecording(); // This function should handle mic access and return MediaRecorder\n    if (recorder) {\n      setMediaRecorder(recorder);\n\n      // Start visualization simulation and store the interval ID\n      visualizerIntervalRef.current = setInterval(() => {\n        // Generate random data for visualization (replace with actual audio data if available)\n        setVisualizerData(Array.from({\n          length: 20\n        }, () => Math.random() * 100));\n      }, 100);\n    } else {\n      // Handle cases where startRecording failed (e.g., mic permission denied)\n      console.error(\"Failed to get media recorder. Check microphone permissions.\");\n    }\n  };\n  const handleStopRecording = () => {\n    // Stop recording via AudioContext and clear the visualizer interval\n    stopRecording(mediaRecorder);\n    setVisualizerData([]);\n    if (visualizerIntervalRef.current) {\n      clearInterval(visualizerIntervalRef.current);\n      visualizerIntervalRef.current = null; // Clear the ref\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(RecorderContainer, {\n    children: [!recording && !audioBlob && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleStartRecording,\n      disabled: loading,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), recording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Visualizer, {\n        children: visualizerData.map((height, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `${height}%`\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleStopRecording,\n        style: {\n          backgroundColor: 'red'\n        },\n        children: [\" \", \"Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), audioBlob && !recording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: URL.createObjectURL(audioBlob)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: recognizeSong,\n          disabled: loading,\n          children: loading ? 'Processing...' : 'Recognize Song'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: reset,\n          style: {\n            marginLeft: '1rem',\n            border: '1px solid gray',\n            backgroundColor: 'transparent',\n            color: 'gray'\n          },\n          children: [\" \", \"Try Again\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red',\n        marginTop: '1rem'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this), result && /*#__PURE__*/_jsxDEV(ResultContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Match Found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: result.albumCover || 'https://placehold.co/200x200/cccccc/333333?text=No+Cover',\n        alt: result.title || 'Album Cover',\n        onError: e => {\n          e.target.onerror = null;\n          e.target.src = 'https://placehold.co/200x200/cccccc/333333?text=Image+Error';\n        } // Fallback on image load error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: result.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Album: \", result.album]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), result.previewUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: result.previewUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 33\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Recorder, \"n3s+YFKL16Yiz72bYwn0pUrwr1U=\");\n_c = Recorder;\nexport default Recorder;\nvar _c;\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","AudioContext","Button","RecorderContainer","Visualizer","ResultContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","Recorder","_s","recording","audioBlob","result","loading","error","startRecording","stopRecording","recognizeSong","reset","mediaRecorder","setMediaRecorder","visualizerData","setVisualizerData","visualizerIntervalRef","state","stop","console","log","current","clearInterval","handleStartRecording","recorder","setInterval","Array","from","length","Math","random","handleStopRecording","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","map","height","index","style","backgroundColor","controls","src","URL","createObjectURL","marginLeft","border","color","marginTop","albumCover","alt","title","onError","e","target","onerror","artist","album","previewUrl","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Musync/frontend/src/components/Recorder/Recorder.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react'; // Import useRef for interval cleanup\r\nimport { AudioContext } from '../../context/AudioContext';\r\nimport Button from '../Button/Button';\r\nimport { RecorderContainer, Visualizer, ResultContainer } from './Recorder.styles';\r\n\r\nconst Recorder = () => {\r\n  const {\r\n    recording,\r\n    audioBlob,\r\n    result,\r\n    loading,\r\n    error,\r\n    startRecording,\r\n    stopRecording,\r\n    recognizeSong,\r\n    reset\r\n  } = useContext(AudioContext);\r\n\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [visualizerData, setVisualizerData] = useState([]);\r\n  const visualizerIntervalRef = useRef(null); // Use useRef to hold the interval ID\r\n\r\n  // Effect to clean up mediaRecorder when component unmounts or mediaRecorder changes\r\n  useEffect(() => {\r\n    return () => {\r\n      if (mediaRecorder && mediaRecorder.state !== 'inactive') {\r\n        mediaRecorder.stop();\r\n        console.log('MediaRecorder stopped during cleanup.');\r\n      }\r\n      // Also clear the visualizer interval on component unmount\r\n      if (visualizerIntervalRef.current) {\r\n        clearInterval(visualizerIntervalRef.current);\r\n      }\r\n    };\r\n  }, [mediaRecorder]); // Dependency on mediaRecorder to ensure cleanup if it changes\r\n\r\n  const handleStartRecording = async () => {\r\n    // Reset any previous state before starting new recording\r\n    reset();\r\n    setVisualizerData([]);\r\n\r\n    const recorder = await startRecording(); // This function should handle mic access and return MediaRecorder\r\n    if (recorder) {\r\n      setMediaRecorder(recorder);\r\n\r\n      // Start visualization simulation and store the interval ID\r\n      visualizerIntervalRef.current = setInterval(() => {\r\n        // Generate random data for visualization (replace with actual audio data if available)\r\n        setVisualizerData(Array.from({ length: 20 }, () => Math.random() * 100));\r\n      }, 100);\r\n    } else {\r\n      // Handle cases where startRecording failed (e.g., mic permission denied)\r\n      console.error(\"Failed to get media recorder. Check microphone permissions.\");\r\n    }\r\n  };\r\n\r\n  const handleStopRecording = () => {\r\n    // Stop recording via AudioContext and clear the visualizer interval\r\n    stopRecording(mediaRecorder);\r\n    setVisualizerData([]);\r\n    if (visualizerIntervalRef.current) {\r\n      clearInterval(visualizerIntervalRef.current);\r\n      visualizerIntervalRef.current = null; // Clear the ref\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RecorderContainer>\r\n      {/* State 1: Ready to start recording */}\r\n      {!recording && !audioBlob && (\r\n        <Button onClick={handleStartRecording} disabled={loading}>\r\n          Start Recording\r\n        </Button>\r\n      )}\r\n\r\n      {/* State 2: Currently recording */}\r\n      {recording && (\r\n        <>\r\n          <Visualizer>\r\n            {visualizerData.map((height, index) => (\r\n              <div key={index} style={{ height: `${height}%` }} />\r\n            ))}\r\n          </Visualizer>\r\n          <Button onClick={handleStopRecording} style={{ backgroundColor: 'red' }}> {/* Assuming your Button component takes style prop for color */}\r\n            Stop Recording\r\n          </Button>\r\n        </>\r\n      )}\r\n\r\n      {/* State 3: Audio recorded, ready for recognition or retry */}\r\n      {audioBlob && !recording && (\r\n        <>\r\n          <audio controls src={URL.createObjectURL(audioBlob)} />\r\n          <div>\r\n            <Button onClick={recognizeSong} disabled={loading}>\r\n              {loading ? 'Processing...' : 'Recognize Song'}\r\n            </Button>\r\n            <Button onClick={reset} style={{ marginLeft: '1rem', border: '1px solid gray', backgroundColor: 'transparent', color: 'gray' }}> {/* Assuming your Button component takes style prop for variant */}\r\n              Try Again\r\n            </Button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* Display error messages */}\r\n      {error && <p style={{ color: 'red', marginTop: '1rem' }}>{error}</p>}\r\n\r\n      {/* Display recognition result */}\r\n      {result && (\r\n        <ResultContainer>\r\n          <h3>Match Found!</h3>\r\n          {/* Provide a fallback placeholder image if albumCover is missing */}\r\n          <img\r\n            src={result.albumCover || 'https://placehold.co/200x200/cccccc/333333?text=No+Cover'}\r\n            alt={result.title || 'Album Cover'}\r\n            onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/200x200/cccccc/333333?text=Image+Error'; }} // Fallback on image load error\r\n          />\r\n          <h4>{result.title}</h4>\r\n          <p>{result.artist}</p>\r\n          <p>Album: {result.album}</p>\r\n          {result.previewUrl && <audio controls src={result.previewUrl} />} {/* Only show audio if previewUrl exists */}\r\n        </ResultContainer>\r\n      )}\r\n    </RecorderContainer>\r\n  );\r\n};\r\n\r\nexport default Recorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}