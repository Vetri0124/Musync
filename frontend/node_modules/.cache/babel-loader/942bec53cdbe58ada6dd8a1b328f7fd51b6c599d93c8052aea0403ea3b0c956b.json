{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Musync\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         if (token) {\n//           const res = await axios.get('/api/auth/me', {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           setUser(res.data);\n//         }\n//       } catch (err) {\n//         console.error(err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     checkAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     const res = await axios.post('/api/auth/login', { email, password });\n//     localStorage.setItem('token', res.data.token);\n//     setUser(res.data.user);\n//   };\n\n//   const register = async (formData) => {\n//     const res = await axios.post('/api/auth/register', formData);\n//     localStorage.setItem('token', res.data.token);\n//     setUser(res.data.user);\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setUser(null);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export { AuthContext, AuthProvider };\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// 1. Export AuthContext when it's created\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(); // <--- Change this line to include 'export' here\n\n// Define your API base URL here.\n// IMPORTANT: Replace 'http://localhost:5000' with the actual URL and port where your backend is running.\n// If your backend routes are prefixed with something like /api/v1, you can include that here as well.\nconst API_BASE_URL = 'http://localhost:5000'; // Adjust this to your actual backend URL\n\nconst API = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const res = await API.get('/api/auth/me', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          setUser(res.data);\n        }\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error(\"Error checking auth status:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message);\n        if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n          localStorage.removeItem('token');\n          setUser(null);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const res = await API.post('/api/auth/login', {\n        email,\n        password\n      });\n      localStorage.setItem('token', res.data.token);\n      setUser(res.data.user);\n      return res.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(\"Login failed:\", ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message);\n      throw err;\n    }\n  };\n  const register = async formData => {\n    try {\n      const res = await API.post('/api/auth/register', formData);\n      localStorage.setItem('token', res.data.token);\n      setUser(res.data.user);\n      return res.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      console.error(\"Registration failed:\", ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message);\n      throw err;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n\n// 2. Only export AuthProvider here. AuthContext is already exported above.\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport { AuthProvider }; // <--- Change this line to only export AuthProvider\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","API","create","baseURL","headers","AuthProvider","children","_s","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","res","get","Authorization","data","err","_err$response","_err$response$data","console","error","response","message","status","removeItem","login","email","password","post","setItem","_err$response2","_err$response2$data","register","formData","_err$response3","_err$response3$data","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Musync/frontend/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         const token = localStorage.getItem('token');\r\n//         if (token) {\r\n//           const res = await axios.get('/api/auth/me', {\r\n//             headers: { Authorization: `Bearer ${token}` }\r\n//           });\r\n//           setUser(res.data);\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     checkAuth();\r\n//   }, []);\r\n\r\n//   const login = async (email, password) => {\r\n//     const res = await axios.post('/api/auth/login', { email, password });\r\n//     localStorage.setItem('token', res.data.token);\r\n//     setUser(res.data.user);\r\n//   };\r\n\r\n//   const register = async (formData) => {\r\n//     const res = await axios.post('/api/auth/register', formData);\r\n//     localStorage.setItem('token', res.data.token);\r\n//     setUser(res.data.user);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setUser(null);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// 1. Export AuthContext when it's created\r\nexport const AuthContext = createContext(); // <--- Change this line to include 'export' here\r\n\r\n// Define your API base URL here.\r\n// IMPORTANT: Replace 'http://localhost:5000' with the actual URL and port where your backend is running.\r\n// If your backend routes are prefixed with something like /api/v1, you can include that here as well.\r\nconst API_BASE_URL = 'http://localhost:5000'; // Adjust this to your actual backend URL\r\n\r\nconst API = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          const res = await API.get('/api/auth/me', {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          });\r\n          setUser(res.data);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error checking auth status:\", err.response?.data?.message || err.message);\r\n        if (err.response && (err.response.status === 401 || err.response.status === 403)) {\r\n             localStorage.removeItem('token');\r\n             setUser(null);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const res = await API.post('/api/auth/login', { email, password });\r\n      localStorage.setItem('token', res.data.token);\r\n      setUser(res.data.user);\r\n      return res.data;\r\n    } catch (err) {\r\n      console.error(\"Login failed:\", err.response?.data?.message || err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const register = async (formData) => {\r\n    try {\r\n      const res = await API.post('/api/auth/register', formData);\r\n      localStorage.setItem('token', res.data.token);\r\n      setUser(res.data.user);\r\n      return res.data;\r\n    } catch (err) {\r\n      console.error(\"Registration failed:\", err.response?.data?.message || err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// 2. Only export AuthProvider here. AuthContext is already exported above.\r\nexport { AuthProvider }; // <--- Change this line to only export AuthProvider"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}