{"ast":null,"code":"// // import React, { createContext, useState, useEffect } from 'react';\n// // import axios from 'axios';\n\n// // const AuthContext = createContext();\n\n// // const AuthProvider = ({ children }) => {\n// //   const [user, setUser] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const checkAuth = async () => {\n// //       try {\n// //         const token = localStorage.getItem('token');\n// //         if (token) {\n// //           const res = await axios.get('/api/auth/me', {\n// //             headers: { Authorization: `Bearer ${token}` }\n// //           });\n// //           setUser(res.data);\n// //         }\n// //       } catch (err) {\n// //         console.error(err);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n// //     checkAuth();\n// //   }, []);\n\n// //   const login = async (email, password) => {\n// //     const res = await axios.post('/api/auth/login', { email, password });\n// //     localStorage.setItem('token', res.data.token);\n// //     setUser(res.data.user);\n// //   };\n\n// //   const register = async (formData) => {\n// //     const res = await axios.post('/api/auth/register', formData);\n// //     localStorage.setItem('token', res.data.token);\n// //     setUser(res.data.user);\n// //   };\n\n// //   const logout = () => {\n// //     localStorage.removeItem('token');\n// //     setUser(null);\n// //   };\n\n// //   return (\n// //     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\n// //       {children}\n// //     </AuthContext.Provider>\n// //   );\n// // };\n\n// // export { AuthContext, AuthProvider };\n\n// import React, { createContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// // 1. Export AuthContext when it's created\n// export const AuthContext = createContext(); // <--- Change this line to include 'export' here\n\n// // Define your API base URL here.\n// // IMPORTANT: Replace 'http://localhost:5000' with the actual URL and port where your backend is running.\n// // If your backend routes are prefixed with something like /api/v1, you can include that here as well.\n// const API_BASE_URL = 'http://localhost:5000'; // Adjust this to your actual backend URL\n\n// const API = axios.create({\n//   baseURL: API_BASE_URL,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         if (token) {\n//           const res = await API.get('/api/auth/me', {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           setUser(res.data);\n//         }\n//       } catch (err) {\n//         console.error(\"Error checking auth status:\", err.response?.data?.message || err.message);\n//         if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n//              localStorage.removeItem('token');\n//              setUser(null);\n//         }\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     checkAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//       const res = await API.post('/api/auth/login', { email, password });\n//       localStorage.setItem('token', res.data.token);\n//       setUser(res.data.user);\n//       return res.data;\n//     } catch (err) {\n//       console.error(\"Login failed:\", err.response?.data?.message || err.message);\n//       throw err;\n//     }\n//   };\n\n//   const register = async (formData) => {\n//     try {\n//       const res = await API.post('/api/auth/register', formData);\n//       localStorage.setItem('token', res.data.token);\n//       setUser(res.data.user);\n//       return res.data;\n//     } catch (err) {\n//       console.error(\"Registration failed:\", err.response?.data?.message || err.message);\n//       throw err;\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setUser(null);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// // 2. Only export AuthProvider here. AuthContext is already exported above.\n// export { AuthProvider }; // <--- Change this line to only export AuthProvider","map":{"version":3,"names":[],"sources":["C:/Users/user/Desktop/Musync/frontend/src/context/AuthContext.js"],"sourcesContent":["// // import React, { createContext, useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n\r\n// // const AuthContext = createContext();\r\n\r\n// // const AuthProvider = ({ children }) => {\r\n// //   const [user, setUser] = useState(null);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const checkAuth = async () => {\r\n// //       try {\r\n// //         const token = localStorage.getItem('token');\r\n// //         if (token) {\r\n// //           const res = await axios.get('/api/auth/me', {\r\n// //             headers: { Authorization: `Bearer ${token}` }\r\n// //           });\r\n// //           setUser(res.data);\r\n// //         }\r\n// //       } catch (err) {\r\n// //         console.error(err);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n// //     checkAuth();\r\n// //   }, []);\r\n\r\n// //   const login = async (email, password) => {\r\n// //     const res = await axios.post('/api/auth/login', { email, password });\r\n// //     localStorage.setItem('token', res.data.token);\r\n// //     setUser(res.data.user);\r\n// //   };\r\n\r\n// //   const register = async (formData) => {\r\n// //     const res = await axios.post('/api/auth/register', formData);\r\n// //     localStorage.setItem('token', res.data.token);\r\n// //     setUser(res.data.user);\r\n// //   };\r\n\r\n// //   const logout = () => {\r\n// //     localStorage.removeItem('token');\r\n// //     setUser(null);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n// //       {children}\r\n// //     </AuthContext.Provider>\r\n// //   );\r\n// // };\r\n\r\n// // export { AuthContext, AuthProvider };\r\n\r\n\r\n// import React, { createContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// // 1. Export AuthContext when it's created\r\n// export const AuthContext = createContext(); // <--- Change this line to include 'export' here\r\n\r\n// // Define your API base URL here.\r\n// // IMPORTANT: Replace 'http://localhost:5000' with the actual URL and port where your backend is running.\r\n// // If your backend routes are prefixed with something like /api/v1, you can include that here as well.\r\n// const API_BASE_URL = 'http://localhost:5000'; // Adjust this to your actual backend URL\r\n\r\n// const API = axios.create({\r\n//   baseURL: API_BASE_URL,\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n// });\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         const token = localStorage.getItem('token');\r\n//         if (token) {\r\n//           const res = await API.get('/api/auth/me', {\r\n//             headers: { Authorization: `Bearer ${token}` }\r\n//           });\r\n//           setUser(res.data);\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error checking auth status:\", err.response?.data?.message || err.message);\r\n//         if (err.response && (err.response.status === 401 || err.response.status === 403)) {\r\n//              localStorage.removeItem('token');\r\n//              setUser(null);\r\n//         }\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     checkAuth();\r\n//   }, []);\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const res = await API.post('/api/auth/login', { email, password });\r\n//       localStorage.setItem('token', res.data.token);\r\n//       setUser(res.data.user);\r\n//       return res.data;\r\n//     } catch (err) {\r\n//       console.error(\"Login failed:\", err.response?.data?.message || err.message);\r\n//       throw err;\r\n//     }\r\n//   };\r\n\r\n//   const register = async (formData) => {\r\n//     try {\r\n//       const res = await API.post('/api/auth/register', formData);\r\n//       localStorage.setItem('token', res.data.token);\r\n//       setUser(res.data.user);\r\n//       return res.data;\r\n//     } catch (err) {\r\n//       console.error(\"Registration failed:\", err.response?.data?.message || err.message);\r\n//       throw err;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setUser(null);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // 2. Only export AuthProvider here. AuthContext is already exported above.\r\n// export { AuthProvider }; // <--- Change this line to only export AuthProvider"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}