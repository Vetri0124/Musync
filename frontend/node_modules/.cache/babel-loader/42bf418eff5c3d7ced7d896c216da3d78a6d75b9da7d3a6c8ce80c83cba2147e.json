{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madhu\\\\OneDrive\\\\Desktop\\\\Musync\\\\Musync\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create and export AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Define your API base URL here.\n// IMPORTANT: Replace 'http://localhost:5000' with the actual URL and port where your backend is running.\nconst API_BASE_URL = 'http://localhost:5000'; // Adjust this to your actual backend URL\n\nconst API = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Set Authorization header for API instance for subsequent requests\n          API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          const res = await API.get('/api/auth/me'); // No need to pass headers again if set on instance\n          setUser(res.data.data); // Assuming your /api/auth/me returns { success: true, data: user }\n        }\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error(\"Error checking auth status:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message);\n        // If token is invalid or expired, clear it and log out user\n        if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n          localStorage.removeItem('token');\n          setUser(null);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []); // Empty dependency array means this runs once on mount\n\n  const login = async (email, password) => {\n    try {\n      const res = await API.post('/api/auth/login', {\n        email,\n        password\n      });\n      localStorage.setItem('token', res.data.token);\n      setUser(res.data.user); // Assuming login response also sends user data\n      API.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`; // Set header for future requests\n      return res.data;\n    } catch (err) {\n      // Extract specific error message from backend if available, otherwise use generic\n      const errorMessage = err.response && err.response.data && err.response.data.error ? err.response.data.error : err.message || \"Login failed. Please try again.\";\n      console.error(\"Login failed:\", errorMessage);\n      throw new Error(errorMessage); // Re-throw a new Error with the specific message\n    }\n  };\n  const register = async formData => {\n    try {\n      const res = await API.post('/api/auth/register', formData);\n      localStorage.setItem('token', res.data.token);\n      setUser(res.data.user); // Assuming register response also sends user data\n      API.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`; // Set header for future requests\n      return res.data;\n    } catch (err) {\n      // --- CORRECTED CATCH BLOCK FOR REGISTRATION ---\n      // Extract specific error message from backend if available, otherwise use generic\n      const errorMessage = err.response && err.response.data && err.response.data.error ? err.response.data.error : err.message || \"Registration failed. Please try again.\";\n      console.error(\"Registration failed:\", errorMessage);\n      throw new Error(errorMessage); // Re-throw a new Error with the specific message\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete API.defaults.headers.common['Authorization']; // Remove Authorization header\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n// Export AuthProvider\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport { AuthProvider };\n\n// // import React, { createContext, useState, useEffect } from 'react';\n// // import axios from 'axios';\n\n// // const AuthContext = createContext();\n\n// // const AuthProvider = ({ children }) => {\n// //   const [user, setUser] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     const checkAuth = async () => {\n// //       try {\n// //         const token = localStorage.getItem('token');\n// //         if (token) {\n// //           const res = await axios.get('/api/auth/me', {\n// //             headers: { Authorization: `Bearer ${token}` }\n// //           });\n// //           setUser(res.data);\n// //         }\n// //       } catch (err) {\n// //         console.error(err);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n// //     checkAuth();\n// //   }, []);\n\n// //   const login = async (email, password) => {\n// //     const res = await axios.post('/api/auth/login', { email, password });\n// //     localStorage.setItem('token', res.data.token);\n// //     setUser(res.data.user);\n// //   };\n\n// //   const register = async (formData) => {\n// //     const res = await axios.post('/api/auth/register', formData);\n// //     localStorage.setItem('token', res.data.token);\n// //     setUser(res.data.user);\n// //   };\n\n// //   const logout = () => {\n// //     localStorage.removeItem('token');\n// //     setUser(null);\n// //   };\n\n// //   return (\n// //     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\n// //       {children}\n// //     </AuthContext.Provider>\n// //   );\n// // };\n\n// // export { AuthContext, AuthProvider };\n\n// import React, { createContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// // 1. Export AuthContext when it's created\n// export const AuthContext = createContext(); // <--- Change this line to include 'export' here\n\n// // Define your API base URL here.\n// // IMPORTANT: Replace 'http://localhost:5000' with the actual URL and port where your backend is running.\n// // If your backend routes are prefixed with something like /api/v1, you can include that here as well.\n// const API_BASE_URL = 'http://localhost:5000'; // Adjust this to your actual backend URL\n\n// const API = axios.create({\n//   baseURL: API_BASE_URL,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         if (token) {\n//           const res = await API.get('/api/auth/me', {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           setUser(res.data);\n//         }\n//       } catch (err) {\n//         console.error(\"Error checking auth status:\", err.response?.data?.message || err.message);\n//         if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n//              localStorage.removeItem('token');\n//              setUser(null);\n//         }\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     checkAuth();\n//   }, []);\n\n//   const login = async (email, password) => {\n//     try {\n//       const res = await API.post('/api/auth/login', { email, password });\n//       localStorage.setItem('token', res.data.token);\n//       setUser(res.data.user);\n//       return res.data;\n//     } catch (err) {\n//       console.error(\"Login failed:\", err.response?.data?.message || err.message);\n//       throw err;\n//     }\n//   };\n\n//   const register = async (formData) => {\n//     try {\n//       const res = await API.post('/api/auth/register', formData);\n//       localStorage.setItem('token', res.data.token);\n//       setUser(res.data.user);\n//       return res.data;\n//     } catch (err) {\n//       console.error(\"Registration failed:\", err.response?.data?.message || err.message);\n//       throw err;\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setUser(null);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// // 2. Only export AuthProvider here. AuthContext is already exported above.\n// export { AuthProvider }; // <--- Change this line to only export AuthProvider\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","API","create","baseURL","headers","AuthProvider","children","_s","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","defaults","common","res","get","data","err","_err$response","_err$response$data","console","error","response","message","status","removeItem","login","email","password","post","setItem","errorMessage","Error","register","formData","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Madhu/OneDrive/Desktop/Musync/Musync/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create and export AuthContext\r\nexport const AuthContext = createContext();\r\n\r\n// Define your API base URL here.\r\n// IMPORTANT: Replace 'http://localhost:5000' with the actual URL and port where your backend is running.\r\nconst API_BASE_URL = 'http://localhost:5000'; // Adjust this to your actual backend URL\r\n\r\nconst API = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          // Set Authorization header for API instance for subsequent requests\r\n          API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          const res = await API.get('/api/auth/me'); // No need to pass headers again if set on instance\r\n          setUser(res.data.data); // Assuming your /api/auth/me returns { success: true, data: user }\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error checking auth status:\", err.response?.data?.error || err.message);\r\n        // If token is invalid or expired, clear it and log out user\r\n        if (err.response && (err.response.status === 401 || err.response.status === 403)) {\r\n          localStorage.removeItem('token');\r\n          setUser(null);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    checkAuth();\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const res = await API.post('/api/auth/login', { email, password });\r\n      localStorage.setItem('token', res.data.token);\r\n      setUser(res.data.user); // Assuming login response also sends user data\r\n      API.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`; // Set header for future requests\r\n      return res.data;\r\n    } catch (err) {\r\n      // Extract specific error message from backend if available, otherwise use generic\r\n      const errorMessage = err.response && err.response.data && err.response.data.error\r\n                           ? err.response.data.error\r\n                           : err.message || \"Login failed. Please try again.\";\r\n      console.error(\"Login failed:\", errorMessage);\r\n      throw new Error(errorMessage); // Re-throw a new Error with the specific message\r\n    }\r\n  };\r\n\r\n  const register = async (formData) => {\r\n    try {\r\n      const res = await API.post('/api/auth/register', formData);\r\n      localStorage.setItem('token', res.data.token);\r\n      setUser(res.data.user); // Assuming register response also sends user data\r\n      API.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`; // Set header for future requests\r\n      return res.data;\r\n    } catch (err) {\r\n      // --- CORRECTED CATCH BLOCK FOR REGISTRATION ---\r\n      // Extract specific error message from backend if available, otherwise use generic\r\n      const errorMessage = err.response && err.response.data && err.response.data.error\r\n                           ? err.response.data.error\r\n                           : err.message || \"Registration failed. Please try again.\";\r\n      console.error(\"Registration failed:\", errorMessage);\r\n      throw new Error(errorMessage); // Re-throw a new Error with the specific message\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete API.defaults.headers.common['Authorization']; // Remove Authorization header\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Export AuthProvider\r\nexport { AuthProvider };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React, { createContext, useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n\r\n// // const AuthContext = createContext();\r\n\r\n// // const AuthProvider = ({ children }) => {\r\n// //   const [user, setUser] = useState(null);\r\n// //   const [loading, setLoading] = useState(true);\r\n\r\n// //   useEffect(() => {\r\n// //     const checkAuth = async () => {\r\n// //       try {\r\n// //         const token = localStorage.getItem('token');\r\n// //         if (token) {\r\n// //           const res = await axios.get('/api/auth/me', {\r\n// //             headers: { Authorization: `Bearer ${token}` }\r\n// //           });\r\n// //           setUser(res.data);\r\n// //         }\r\n// //       } catch (err) {\r\n// //         console.error(err);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n// //     checkAuth();\r\n// //   }, []);\r\n\r\n// //   const login = async (email, password) => {\r\n// //     const res = await axios.post('/api/auth/login', { email, password });\r\n// //     localStorage.setItem('token', res.data.token);\r\n// //     setUser(res.data.user);\r\n// //   };\r\n\r\n// //   const register = async (formData) => {\r\n// //     const res = await axios.post('/api/auth/register', formData);\r\n// //     localStorage.setItem('token', res.data.token);\r\n// //     setUser(res.data.user);\r\n// //   };\r\n\r\n// //   const logout = () => {\r\n// //     localStorage.removeItem('token');\r\n// //     setUser(null);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n// //       {children}\r\n// //     </AuthContext.Provider>\r\n// //   );\r\n// // };\r\n\r\n// // export { AuthContext, AuthProvider };\r\n\r\n\r\n// import React, { createContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// // 1. Export AuthContext when it's created\r\n// export const AuthContext = createContext(); // <--- Change this line to include 'export' here\r\n\r\n// // Define your API base URL here.\r\n// // IMPORTANT: Replace 'http://localhost:5000' with the actual URL and port where your backend is running.\r\n// // If your backend routes are prefixed with something like /api/v1, you can include that here as well.\r\n// const API_BASE_URL = 'http://localhost:5000'; // Adjust this to your actual backend URL\r\n\r\n// const API = axios.create({\r\n//   baseURL: API_BASE_URL,\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n// });\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         const token = localStorage.getItem('token');\r\n//         if (token) {\r\n//           const res = await API.get('/api/auth/me', {\r\n//             headers: { Authorization: `Bearer ${token}` }\r\n//           });\r\n//           setUser(res.data);\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error checking auth status:\", err.response?.data?.message || err.message);\r\n//         if (err.response && (err.response.status === 401 || err.response.status === 403)) {\r\n//              localStorage.removeItem('token');\r\n//              setUser(null);\r\n//         }\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     checkAuth();\r\n//   }, []);\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const res = await API.post('/api/auth/login', { email, password });\r\n//       localStorage.setItem('token', res.data.token);\r\n//       setUser(res.data.user);\r\n//       return res.data;\r\n//     } catch (err) {\r\n//       console.error(\"Login failed:\", err.response?.data?.message || err.message);\r\n//       throw err;\r\n//     }\r\n//   };\r\n\r\n//   const register = async (formData) => {\r\n//     try {\r\n//       const res = await API.post('/api/auth/register', formData);\r\n//       localStorage.setItem('token', res.data.token);\r\n//       setUser(res.data.user);\r\n//       return res.data;\r\n//     } catch (err) {\r\n//       console.error(\"Registration failed:\", err.response?.data?.message || err.message);\r\n//       throw err;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setUser(null);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // 2. Only export AuthProvider here. AuthContext is already exported above.\r\n// export { AuthProvider }; // <--- Change this line to only export AuthProvider"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}