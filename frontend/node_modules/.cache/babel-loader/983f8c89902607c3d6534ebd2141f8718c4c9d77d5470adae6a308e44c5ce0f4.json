{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madhu\\\\OneDrive\\\\Desktop\\\\Musync\\\\Musync\\\\frontend\\\\src\\\\components\\\\ParticleBackground.js\",\n  _s = $RefreshSig$();\n// src/components/ParticleBackground.jsx\nimport React, { useCallback, useMemo } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\"; // or loadFull for more features\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleBackground = ({\n  theme\n}) => {\n  _s();\n  // useCallback is used to memoize the init function.\n  // This ensures the init function reference is stable across re-renders,\n  // which is good for performance and avoiding unnecessary re-initializations.\n  const particlesInit = useCallback(async engine => {\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles \"slim\" package bundle, it's the smallest bundle and the default\n    // of tsParticles but you can use other ones like \"tsparticles-full\" or \"tsparticles-engine\"\n    await loadSlim(engine);\n  }, []);\n\n  // useMemo is used to memoize the options object.\n  // This prevents the options object from being re-created on every render,\n  // which can be expensive and cause Particles to re-render unnecessarily.\n  const particlesOptions = useMemo(() => {\n    return {\n      background: {\n        color: {\n          value: \"transparent\" // Particles overlay on your body background\n        }\n      },\n      fpsLimit: 60,\n      // Limit frames per second for performance\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true,\n            mode: \"push\" // Push new particles on click\n          },\n          onHover: {\n            enable: true,\n            mode: \"repulse\" // Particles move away on hover\n          },\n          resize: true\n        },\n        modes: {\n          push: {\n            quantity: 4 // Number of particles to push on click\n          },\n          repulse: {\n            distance: 100,\n            // How far particles move away\n            duration: 0.4\n          }\n        }\n      },\n      particles: {\n        color: {\n          // Use theme colors for dynamic particle colors\n          value: [theme.colors.primaryLight, theme.colors.secondaryLight, theme.colors.info] // Multiple colors for more visual interest\n        },\n        links: {\n          color: theme.colors.border,\n          // Link color from theme\n          distance: 150,\n          enable: true,\n          opacity: 0.3,\n          // Subtle links\n          width: 1\n        },\n        collisions: {\n          enable: true // Particles bounce off each other\n        },\n        move: {\n          direction: \"none\",\n          enable: true,\n          outModes: {\n            default: \"bounce\" // Particles bounce off screen edges\n          },\n          random: false,\n          speed: 0.8,\n          // Slower, more elegant movement\n          straight: false\n        },\n        number: {\n          density: {\n            enable: true,\n            area: 800\n          },\n          value: 80 // Number of particles\n        },\n        opacity: {\n          value: 0.5 // General particle opacity\n        },\n        shape: {\n          type: \"circle\" // Or \"star\", \"triangle\", \"edge\", \"polygon\" etc.\n        },\n        size: {\n          value: {\n            min: 1,\n            max: 3\n          } // Random size for particles\n        }\n      },\n      detectRetina: true // For high-DPI screens\n    };\n  }, [theme]); // Re-create options if theme changes\n\n  return /*#__PURE__*/_jsxDEV(Particles, {\n    id: \"tsparticles\",\n    init: particlesInit,\n    options: particlesOptions,\n    style: {\n      position: \"fixed\",\n      // Cover the entire viewport\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      zIndex: -2,\n      // Below your body pseudo-elements and content\n      opacity: 0.7 // Overall opacity for the particle canvas\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(ParticleBackground, \"F3li4fEGpxqcKJg+xfnrzTW+tAM=\");\n_c = ParticleBackground;\nexport default ParticleBackground;\nvar _c;\n$RefreshReg$(_c, \"ParticleBackground\");","map":{"version":3,"names":["React","useCallback","useMemo","Particles","loadSlim","jsxDEV","_jsxDEV","ParticleBackground","theme","_s","particlesInit","engine","particlesOptions","background","color","value","fpsLimit","interactivity","events","onClick","enable","mode","onHover","resize","modes","push","quantity","repulse","distance","duration","particles","colors","primaryLight","secondaryLight","info","links","border","opacity","width","collisions","move","direction","outModes","default","random","speed","straight","number","density","area","shape","type","size","min","max","detectRetina","id","init","options","style","position","top","left","height","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Madhu/OneDrive/Desktop/Musync/Musync/frontend/src/components/ParticleBackground.js"],"sourcesContent":["// src/components/ParticleBackground.jsx\r\nimport React, { useCallback, useMemo } from \"react\";\r\nimport Particles from \"react-tsparticles\";\r\nimport { loadSlim } from \"tsparticles-slim\"; // or loadFull for more features\r\n\r\nconst ParticleBackground = ({ theme }) => {\r\n  // useCallback is used to memoize the init function.\r\n  // This ensures the init function reference is stable across re-renders,\r\n  // which is good for performance and avoiding unnecessary re-initializations.\r\n  const particlesInit = useCallback(async (engine) => {\r\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\r\n    // this loads the tsparticles \"slim\" package bundle, it's the smallest bundle and the default\r\n    // of tsParticles but you can use other ones like \"tsparticles-full\" or \"tsparticles-engine\"\r\n    await loadSlim(engine);\r\n  }, []);\r\n\r\n  // useMemo is used to memoize the options object.\r\n  // This prevents the options object from being re-created on every render,\r\n  // which can be expensive and cause Particles to re-render unnecessarily.\r\n  const particlesOptions = useMemo(() => {\r\n    return {\r\n      background: {\r\n        color: {\r\n          value: \"transparent\", // Particles overlay on your body background\r\n        },\r\n      },\r\n      fpsLimit: 60, // Limit frames per second for performance\r\n      interactivity: {\r\n        events: {\r\n          onClick: {\r\n            enable: true,\r\n            mode: \"push\", // Push new particles on click\r\n          },\r\n          onHover: {\r\n            enable: true,\r\n            mode: \"repulse\", // Particles move away on hover\r\n          },\r\n          resize: true,\r\n        },\r\n        modes: {\r\n          push: {\r\n            quantity: 4, // Number of particles to push on click\r\n          },\r\n          repulse: {\r\n            distance: 100, // How far particles move away\r\n            duration: 0.4,\r\n          },\r\n        },\r\n      },\r\n      particles: {\r\n        color: {\r\n          // Use theme colors for dynamic particle colors\r\n          value: [\r\n            theme.colors.primaryLight,\r\n            theme.colors.secondaryLight,\r\n            theme.colors.info,\r\n          ], // Multiple colors for more visual interest\r\n        },\r\n        links: {\r\n          color: theme.colors.border, // Link color from theme\r\n          distance: 150,\r\n          enable: true,\r\n          opacity: 0.3, // Subtle links\r\n          width: 1,\r\n        },\r\n        collisions: {\r\n          enable: true, // Particles bounce off each other\r\n        },\r\n        move: {\r\n          direction: \"none\",\r\n          enable: true,\r\n          outModes: {\r\n            default: \"bounce\", // Particles bounce off screen edges\r\n          },\r\n          random: false,\r\n          speed: 0.8, // Slower, more elegant movement\r\n          straight: false,\r\n        },\r\n        number: {\r\n          density: {\r\n            enable: true,\r\n            area: 800,\r\n          },\r\n          value: 80, // Number of particles\r\n        },\r\n        opacity: {\r\n          value: 0.5, // General particle opacity\r\n        },\r\n        shape: {\r\n          type: \"circle\", // Or \"star\", \"triangle\", \"edge\", \"polygon\" etc.\r\n        },\r\n        size: {\r\n          value: { min: 1, max: 3 }, // Random size for particles\r\n        },\r\n      },\r\n      detectRetina: true, // For high-DPI screens\r\n    };\r\n  }, [theme]); // Re-create options if theme changes\r\n\r\n  return (\r\n    <Particles\r\n      id=\"tsparticles\"\r\n      init={particlesInit}\r\n      options={particlesOptions}\r\n      style={{\r\n        position: \"fixed\", // Cover the entire viewport\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        zIndex: -2, // Below your body pseudo-elements and content\r\n        opacity: 0.7, // Overall opacity for the particle canvas\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ParticleBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}